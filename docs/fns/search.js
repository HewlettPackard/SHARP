window.pdocSearch = (function(){
/** elasticlunr - http://weixsong.github.io * Copyright (C) 2017 Oliver Nightingale * Copyright (C) 2017 Wei Song * MIT Licensed */!function(){function e(e){if(null===e||"object"!=typeof e)return e;var t=e.constructor();for(var n in e)e.hasOwnProperty(n)&&(t[n]=e[n]);return t}var t=function(e){var n=new t.Index;return n.pipeline.add(t.trimmer,t.stopWordFilter,t.stemmer),e&&e.call(n,n),n};t.version="0.9.5",lunr=t,t.utils={},t.utils.warn=function(e){return function(t){e.console&&console.warn&&console.warn(t)}}(this),t.utils.toString=function(e){return void 0===e||null===e?"":e.toString()},t.EventEmitter=function(){this.events={}},t.EventEmitter.prototype.addListener=function(){var e=Array.prototype.slice.call(arguments),t=e.pop(),n=e;if("function"!=typeof t)throw new TypeError("last argument must be a function");n.forEach(function(e){this.hasHandler(e)||(this.events[e]=[]),this.events[e].push(t)},this)},t.EventEmitter.prototype.removeListener=function(e,t){if(this.hasHandler(e)){var n=this.events[e].indexOf(t);-1!==n&&(this.events[e].splice(n,1),0==this.events[e].length&&delete this.events[e])}},t.EventEmitter.prototype.emit=function(e){if(this.hasHandler(e)){var t=Array.prototype.slice.call(arguments,1);this.events[e].forEach(function(e){e.apply(void 0,t)},this)}},t.EventEmitter.prototype.hasHandler=function(e){return e in this.events},t.tokenizer=function(e){if(!arguments.length||null===e||void 0===e)return[];if(Array.isArray(e)){var n=e.filter(function(e){return null===e||void 0===e?!1:!0});n=n.map(function(e){return t.utils.toString(e).toLowerCase()});var i=[];return n.forEach(function(e){var n=e.split(t.tokenizer.seperator);i=i.concat(n)},this),i}return e.toString().trim().toLowerCase().split(t.tokenizer.seperator)},t.tokenizer.defaultSeperator=/[\s\-]+/,t.tokenizer.seperator=t.tokenizer.defaultSeperator,t.tokenizer.setSeperator=function(e){null!==e&&void 0!==e&&"object"==typeof e&&(t.tokenizer.seperator=e)},t.tokenizer.resetSeperator=function(){t.tokenizer.seperator=t.tokenizer.defaultSeperator},t.tokenizer.getSeperator=function(){return t.tokenizer.seperator},t.Pipeline=function(){this._queue=[]},t.Pipeline.registeredFunctions={},t.Pipeline.registerFunction=function(e,n){n in t.Pipeline.registeredFunctions&&t.utils.warn("Overwriting existing registered function: "+n),e.label=n,t.Pipeline.registeredFunctions[n]=e},t.Pipeline.getRegisteredFunction=function(e){return e in t.Pipeline.registeredFunctions!=!0?null:t.Pipeline.registeredFunctions[e]},t.Pipeline.warnIfFunctionNotRegistered=function(e){var n=e.label&&e.label in this.registeredFunctions;n||t.utils.warn("Function is not registered with pipeline. This may cause problems when serialising the index.\n",e)},t.Pipeline.load=function(e){var n=new t.Pipeline;return e.forEach(function(e){var i=t.Pipeline.getRegisteredFunction(e);if(!i)throw new Error("Cannot load un-registered function: "+e);n.add(i)}),n},t.Pipeline.prototype.add=function(){var e=Array.prototype.slice.call(arguments);e.forEach(function(e){t.Pipeline.warnIfFunctionNotRegistered(e),this._queue.push(e)},this)},t.Pipeline.prototype.after=function(e,n){t.Pipeline.warnIfFunctionNotRegistered(n);var i=this._queue.indexOf(e);if(-1===i)throw new Error("Cannot find existingFn");this._queue.splice(i+1,0,n)},t.Pipeline.prototype.before=function(e,n){t.Pipeline.warnIfFunctionNotRegistered(n);var i=this._queue.indexOf(e);if(-1===i)throw new Error("Cannot find existingFn");this._queue.splice(i,0,n)},t.Pipeline.prototype.remove=function(e){var t=this._queue.indexOf(e);-1!==t&&this._queue.splice(t,1)},t.Pipeline.prototype.run=function(e){for(var t=[],n=e.length,i=this._queue.length,o=0;n>o;o++){for(var r=e[o],s=0;i>s&&(r=this._queue[s](r,o,e),void 0!==r&&null!==r);s++);void 0!==r&&null!==r&&t.push(r)}return t},t.Pipeline.prototype.reset=function(){this._queue=[]},t.Pipeline.prototype.get=function(){return this._queue},t.Pipeline.prototype.toJSON=function(){return this._queue.map(function(e){return t.Pipeline.warnIfFunctionNotRegistered(e),e.label})},t.Index=function(){this._fields=[],this._ref="id",this.pipeline=new t.Pipeline,this.documentStore=new t.DocumentStore,this.index={},this.eventEmitter=new t.EventEmitter,this._idfCache={},this.on("add","remove","update",function(){this._idfCache={}}.bind(this))},t.Index.prototype.on=function(){var e=Array.prototype.slice.call(arguments);return this.eventEmitter.addListener.apply(this.eventEmitter,e)},t.Index.prototype.off=function(e,t){return this.eventEmitter.removeListener(e,t)},t.Index.load=function(e){e.version!==t.version&&t.utils.warn("version mismatch: current "+t.version+" importing "+e.version);var n=new this;n._fields=e.fields,n._ref=e.ref,n.documentStore=t.DocumentStore.load(e.documentStore),n.pipeline=t.Pipeline.load(e.pipeline),n.index={};for(var i in e.index)n.index[i]=t.InvertedIndex.load(e.index[i]);return n},t.Index.prototype.addField=function(e){return this._fields.push(e),this.index[e]=new t.InvertedIndex,this},t.Index.prototype.setRef=function(e){return this._ref=e,this},t.Index.prototype.saveDocument=function(e){return this.documentStore=new t.DocumentStore(e),this},t.Index.prototype.addDoc=function(e,n){if(e){var n=void 0===n?!0:n,i=e[this._ref];this.documentStore.addDoc(i,e),this._fields.forEach(function(n){var o=this.pipeline.run(t.tokenizer(e[n]));this.documentStore.addFieldLength(i,n,o.length);var r={};o.forEach(function(e){e in r?r[e]+=1:r[e]=1},this);for(var s in r){var u=r[s];u=Math.sqrt(u),this.index[n].addToken(s,{ref:i,tf:u})}},this),n&&this.eventEmitter.emit("add",e,this)}},t.Index.prototype.removeDocByRef=function(e){if(e&&this.documentStore.isDocStored()!==!1&&this.documentStore.hasDoc(e)){var t=this.documentStore.getDoc(e);this.removeDoc(t,!1)}},t.Index.prototype.removeDoc=function(e,n){if(e){var n=void 0===n?!0:n,i=e[this._ref];this.documentStore.hasDoc(i)&&(this.documentStore.removeDoc(i),this._fields.forEach(function(n){var o=this.pipeline.run(t.tokenizer(e[n]));o.forEach(function(e){this.index[n].removeToken(e,i)},this)},this),n&&this.eventEmitter.emit("remove",e,this))}},t.Index.prototype.updateDoc=function(e,t){var t=void 0===t?!0:t;this.removeDocByRef(e[this._ref],!1),this.addDoc(e,!1),t&&this.eventEmitter.emit("update",e,this)},t.Index.prototype.idf=function(e,t){var n="@"+t+"/"+e;if(Object.prototype.hasOwnProperty.call(this._idfCache,n))return this._idfCache[n];var i=this.index[t].getDocFreq(e),o=1+Math.log(this.documentStore.length/(i+1));return this._idfCache[n]=o,o},t.Index.prototype.getFields=function(){return this._fields.slice()},t.Index.prototype.search=function(e,n){if(!e)return[];e="string"==typeof e?{any:e}:JSON.parse(JSON.stringify(e));var i=null;null!=n&&(i=JSON.stringify(n));for(var o=new t.Configuration(i,this.getFields()).get(),r={},s=Object.keys(e),u=0;u<s.length;u++){var a=s[u];r[a]=this.pipeline.run(t.tokenizer(e[a]))}var l={};for(var c in o){var d=r[c]||r.any;if(d){var f=this.fieldSearch(d,c,o),h=o[c].boost;for(var p in f)f[p]=f[p]*h;for(var p in f)p in l?l[p]+=f[p]:l[p]=f[p]}}var v,g=[];for(var p in l)v={ref:p,score:l[p]},this.documentStore.hasDoc(p)&&(v.doc=this.documentStore.getDoc(p)),g.push(v);return g.sort(function(e,t){return t.score-e.score}),g},t.Index.prototype.fieldSearch=function(e,t,n){var i=n[t].bool,o=n[t].expand,r=n[t].boost,s=null,u={};return 0!==r?(e.forEach(function(e){var n=[e];1==o&&(n=this.index[t].expandToken(e));var r={};n.forEach(function(n){var o=this.index[t].getDocs(n),a=this.idf(n,t);if(s&&"AND"==i){var l={};for(var c in s)c in o&&(l[c]=o[c]);o=l}n==e&&this.fieldSearchStats(u,n,o);for(var c in o){var d=this.index[t].getTermFrequency(n,c),f=this.documentStore.getFieldLength(c,t),h=1;0!=f&&(h=1/Math.sqrt(f));var p=1;n!=e&&(p=.15*(1-(n.length-e.length)/n.length));var v=d*a*h*p;c in r?r[c]+=v:r[c]=v}},this),s=this.mergeScores(s,r,i)},this),s=this.coordNorm(s,u,e.length)):void 0},t.Index.prototype.mergeScores=function(e,t,n){if(!e)return t;if("AND"==n){var i={};for(var o in t)o in e&&(i[o]=e[o]+t[o]);return i}for(var o in t)o in e?e[o]+=t[o]:e[o]=t[o];return e},t.Index.prototype.fieldSearchStats=function(e,t,n){for(var i in n)i in e?e[i].push(t):e[i]=[t]},t.Index.prototype.coordNorm=function(e,t,n){for(var i in e)if(i in t){var o=t[i].length;e[i]=e[i]*o/n}return e},t.Index.prototype.toJSON=function(){var e={};return this._fields.forEach(function(t){e[t]=this.index[t].toJSON()},this),{version:t.version,fields:this._fields,ref:this._ref,documentStore:this.documentStore.toJSON(),index:e,pipeline:this.pipeline.toJSON()}},t.Index.prototype.use=function(e){var t=Array.prototype.slice.call(arguments,1);t.unshift(this),e.apply(this,t)},t.DocumentStore=function(e){this._save=null===e||void 0===e?!0:e,this.docs={},this.docInfo={},this.length=0},t.DocumentStore.load=function(e){var t=new this;return t.length=e.length,t.docs=e.docs,t.docInfo=e.docInfo,t._save=e.save,t},t.DocumentStore.prototype.isDocStored=function(){return this._save},t.DocumentStore.prototype.addDoc=function(t,n){this.hasDoc(t)||this.length++,this.docs[t]=this._save===!0?e(n):null},t.DocumentStore.prototype.getDoc=function(e){return this.hasDoc(e)===!1?null:this.docs[e]},t.DocumentStore.prototype.hasDoc=function(e){return e in this.docs},t.DocumentStore.prototype.removeDoc=function(e){this.hasDoc(e)&&(delete this.docs[e],delete this.docInfo[e],this.length--)},t.DocumentStore.prototype.addFieldLength=function(e,t,n){null!==e&&void 0!==e&&0!=this.hasDoc(e)&&(this.docInfo[e]||(this.docInfo[e]={}),this.docInfo[e][t]=n)},t.DocumentStore.prototype.updateFieldLength=function(e,t,n){null!==e&&void 0!==e&&0!=this.hasDoc(e)&&this.addFieldLength(e,t,n)},t.DocumentStore.prototype.getFieldLength=function(e,t){return null===e||void 0===e?0:e in this.docs&&t in this.docInfo[e]?this.docInfo[e][t]:0},t.DocumentStore.prototype.toJSON=function(){return{docs:this.docs,docInfo:this.docInfo,length:this.length,save:this._save}},t.stemmer=function(){var e={ational:"ate",tional:"tion",enci:"ence",anci:"ance",izer:"ize",bli:"ble",alli:"al",entli:"ent",eli:"e",ousli:"ous",ization:"ize",ation:"ate",ator:"ate",alism:"al",iveness:"ive",fulness:"ful",ousness:"ous",aliti:"al",iviti:"ive",biliti:"ble",logi:"log"},t={icate:"ic",ative:"",alize:"al",iciti:"ic",ical:"ic",ful:"",ness:""},n="[^aeiou]",i="[aeiouy]",o=n+"[^aeiouy]*",r=i+"[aeiou]*",s="^("+o+")?"+r+o,u="^("+o+")?"+r+o+"("+r+")?$",a="^("+o+")?"+r+o+r+o,l="^("+o+")?"+i,c=new RegExp(s),d=new RegExp(a),f=new RegExp(u),h=new RegExp(l),p=/^(.+?)(ss|i)es$/,v=/^(.+?)([^s])s$/,g=/^(.+?)eed$/,m=/^(.+?)(ed|ing)$/,y=/.$/,S=/(at|bl|iz)$/,x=new RegExp("([^aeiouylsz])\\1$"),w=new RegExp("^"+o+i+"[^aeiouwxy]$"),I=/^(.+?[^aeiou])y$/,b=/^(.+?)(ational|tional|enci|anci|izer|bli|alli|entli|eli|ousli|ization|ation|ator|alism|iveness|fulness|ousness|aliti|iviti|biliti|logi)$/,E=/^(.+?)(icate|ative|alize|iciti|ical|ful|ness)$/,D=/^(.+?)(al|ance|ence|er|ic|able|ible|ant|ement|ment|ent|ou|ism|ate|iti|ous|ive|ize)$/,F=/^(.+?)(s|t)(ion)$/,_=/^(.+?)e$/,P=/ll$/,k=new RegExp("^"+o+i+"[^aeiouwxy]$"),z=function(n){var i,o,r,s,u,a,l;if(n.length<3)return n;if(r=n.substr(0,1),"y"==r&&(n=r.toUpperCase()+n.substr(1)),s=p,u=v,s.test(n)?n=n.replace(s,"$1$2"):u.test(n)&&(n=n.replace(u,"$1$2")),s=g,u=m,s.test(n)){var z=s.exec(n);s=c,s.test(z[1])&&(s=y,n=n.replace(s,""))}else if(u.test(n)){var z=u.exec(n);i=z[1],u=h,u.test(i)&&(n=i,u=S,a=x,l=w,u.test(n)?n+="e":a.test(n)?(s=y,n=n.replace(s,"")):l.test(n)&&(n+="e"))}if(s=I,s.test(n)){var z=s.exec(n);i=z[1],n=i+"i"}if(s=b,s.test(n)){var z=s.exec(n);i=z[1],o=z[2],s=c,s.test(i)&&(n=i+e[o])}if(s=E,s.test(n)){var z=s.exec(n);i=z[1],o=z[2],s=c,s.test(i)&&(n=i+t[o])}if(s=D,u=F,s.test(n)){var z=s.exec(n);i=z[1],s=d,s.test(i)&&(n=i)}else if(u.test(n)){var z=u.exec(n);i=z[1]+z[2],u=d,u.test(i)&&(n=i)}if(s=_,s.test(n)){var z=s.exec(n);i=z[1],s=d,u=f,a=k,(s.test(i)||u.test(i)&&!a.test(i))&&(n=i)}return s=P,u=d,s.test(n)&&u.test(n)&&(s=y,n=n.replace(s,"")),"y"==r&&(n=r.toLowerCase()+n.substr(1)),n};return z}(),t.Pipeline.registerFunction(t.stemmer,"stemmer"),t.stopWordFilter=function(e){return e&&t.stopWordFilter.stopWords[e]!==!0?e:void 0},t.clearStopWords=function(){t.stopWordFilter.stopWords={}},t.addStopWords=function(e){null!=e&&Array.isArray(e)!==!1&&e.forEach(function(e){t.stopWordFilter.stopWords[e]=!0},this)},t.resetStopWords=function(){t.stopWordFilter.stopWords=t.defaultStopWords},t.defaultStopWords={"":!0,a:!0,able:!0,about:!0,across:!0,after:!0,all:!0,almost:!0,also:!0,am:!0,among:!0,an:!0,and:!0,any:!0,are:!0,as:!0,at:!0,be:!0,because:!0,been:!0,but:!0,by:!0,can:!0,cannot:!0,could:!0,dear:!0,did:!0,"do":!0,does:!0,either:!0,"else":!0,ever:!0,every:!0,"for":!0,from:!0,get:!0,got:!0,had:!0,has:!0,have:!0,he:!0,her:!0,hers:!0,him:!0,his:!0,how:!0,however:!0,i:!0,"if":!0,"in":!0,into:!0,is:!0,it:!0,its:!0,just:!0,least:!0,let:!0,like:!0,likely:!0,may:!0,me:!0,might:!0,most:!0,must:!0,my:!0,neither:!0,no:!0,nor:!0,not:!0,of:!0,off:!0,often:!0,on:!0,only:!0,or:!0,other:!0,our:!0,own:!0,rather:!0,said:!0,say:!0,says:!0,she:!0,should:!0,since:!0,so:!0,some:!0,than:!0,that:!0,the:!0,their:!0,them:!0,then:!0,there:!0,these:!0,they:!0,"this":!0,tis:!0,to:!0,too:!0,twas:!0,us:!0,wants:!0,was:!0,we:!0,were:!0,what:!0,when:!0,where:!0,which:!0,"while":!0,who:!0,whom:!0,why:!0,will:!0,"with":!0,would:!0,yet:!0,you:!0,your:!0},t.stopWordFilter.stopWords=t.defaultStopWords,t.Pipeline.registerFunction(t.stopWordFilter,"stopWordFilter"),t.trimmer=function(e){if(null===e||void 0===e)throw new Error("token should not be undefined");return e.replace(/^\W+/,"").replace(/\W+$/,"")},t.Pipeline.registerFunction(t.trimmer,"trimmer"),t.InvertedIndex=function(){this.root={docs:{},df:0}},t.InvertedIndex.load=function(e){var t=new this;return t.root=e.root,t},t.InvertedIndex.prototype.addToken=function(e,t,n){for(var n=n||this.root,i=0;i<=e.length-1;){var o=e[i];o in n||(n[o]={docs:{},df:0}),i+=1,n=n[o]}var r=t.ref;n.docs[r]?n.docs[r]={tf:t.tf}:(n.docs[r]={tf:t.tf},n.df+=1)},t.InvertedIndex.prototype.hasToken=function(e){if(!e)return!1;for(var t=this.root,n=0;n<e.length;n++){if(!t[e[n]])return!1;t=t[e[n]]}return!0},t.InvertedIndex.prototype.getNode=function(e){if(!e)return null;for(var t=this.root,n=0;n<e.length;n++){if(!t[e[n]])return null;t=t[e[n]]}return t},t.InvertedIndex.prototype.getDocs=function(e){var t=this.getNode(e);return null==t?{}:t.docs},t.InvertedIndex.prototype.getTermFrequency=function(e,t){var n=this.getNode(e);return null==n?0:t in n.docs?n.docs[t].tf:0},t.InvertedIndex.prototype.getDocFreq=function(e){var t=this.getNode(e);return null==t?0:t.df},t.InvertedIndex.prototype.removeToken=function(e,t){if(e){var n=this.getNode(e);null!=n&&t in n.docs&&(delete n.docs[t],n.df-=1)}},t.InvertedIndex.prototype.expandToken=function(e,t,n){if(null==e||""==e)return[];var t=t||[];if(void 0==n&&(n=this.getNode(e),null==n))return t;n.df>0&&t.push(e);for(var i in n)"docs"!==i&&"df"!==i&&this.expandToken(e+i,t,n[i]);return t},t.InvertedIndex.prototype.toJSON=function(){return{root:this.root}},t.Configuration=function(e,n){var e=e||"";if(void 0==n||null==n)throw new Error("fields should not be null");this.config={};var i;try{i=JSON.parse(e),this.buildUserConfig(i,n)}catch(o){t.utils.warn("user configuration parse failed, will use default configuration"),this.buildDefaultConfig(n)}},t.Configuration.prototype.buildDefaultConfig=function(e){this.reset(),e.forEach(function(e){this.config[e]={boost:1,bool:"OR",expand:!1}},this)},t.Configuration.prototype.buildUserConfig=function(e,n){var i="OR",o=!1;if(this.reset(),"bool"in e&&(i=e.bool||i),"expand"in e&&(o=e.expand||o),"fields"in e)for(var r in e.fields)if(n.indexOf(r)>-1){var s=e.fields[r],u=o;void 0!=s.expand&&(u=s.expand),this.config[r]={boost:s.boost||0===s.boost?s.boost:1,bool:s.bool||i,expand:u}}else t.utils.warn("field name in user configuration not found in index instance fields");else this.addAllFields2UserConfig(i,o,n)},t.Configuration.prototype.addAllFields2UserConfig=function(e,t,n){n.forEach(function(n){this.config[n]={boost:1,bool:e,expand:t}},this)},t.Configuration.prototype.get=function(){return this.config},t.Configuration.prototype.reset=function(){this.config={}},lunr.SortedSet=function(){this.length=0,this.elements=[]},lunr.SortedSet.load=function(e){var t=new this;return t.elements=e,t.length=e.length,t},lunr.SortedSet.prototype.add=function(){var e,t;for(e=0;e<arguments.length;e++)t=arguments[e],~this.indexOf(t)||this.elements.splice(this.locationFor(t),0,t);this.length=this.elements.length},lunr.SortedSet.prototype.toArray=function(){return this.elements.slice()},lunr.SortedSet.prototype.map=function(e,t){return this.elements.map(e,t)},lunr.SortedSet.prototype.forEach=function(e,t){return this.elements.forEach(e,t)},lunr.SortedSet.prototype.indexOf=function(e){for(var t=0,n=this.elements.length,i=n-t,o=t+Math.floor(i/2),r=this.elements[o];i>1;){if(r===e)return o;e>r&&(t=o),r>e&&(n=o),i=n-t,o=t+Math.floor(i/2),r=this.elements[o]}return r===e?o:-1},lunr.SortedSet.prototype.locationFor=function(e){for(var t=0,n=this.elements.length,i=n-t,o=t+Math.floor(i/2),r=this.elements[o];i>1;)e>r&&(t=o),r>e&&(n=o),i=n-t,o=t+Math.floor(i/2),r=this.elements[o];return r>e?o:e>r?o+1:void 0},lunr.SortedSet.prototype.intersect=function(e){for(var t=new lunr.SortedSet,n=0,i=0,o=this.length,r=e.length,s=this.elements,u=e.elements;;){if(n>o-1||i>r-1)break;s[n]!==u[i]?s[n]<u[i]?n++:s[n]>u[i]&&i++:(t.add(s[n]),n++,i++)}return t},lunr.SortedSet.prototype.clone=function(){var e=new lunr.SortedSet;return e.elements=this.toArray(),e.length=e.elements.length,e},lunr.SortedSet.prototype.union=function(e){var t,n,i;this.length>=e.length?(t=this,n=e):(t=e,n=this),i=t.clone();for(var o=0,r=n.toArray();o<r.length;o++)i.add(r[o]);return i},lunr.SortedSet.prototype.toJSON=function(){return this.toArray()},function(e,t){"function"==typeof define&&define.amd?define(t):"object"==typeof exports?module.exports=t():e.elasticlunr=t()}(this,function(){return t})}();
    /** pdoc search index */const docs = [{"fullname": "bounce", "modulename": "bounce", "kind": "module", "doc": "<p>Bounce-back the request body.</p>\n\n<p>This application reads in the entire body of the request and returns it as a \nstring, together with the time it took to read the request.\nThis \"kernel\" time measures only the overhead of reading the request data \nthrough flask.\nThe complete two-way overhead of sending the request and reading it back can \nbe measured as the roundtrip time from launching the function to completion.</p>\n\n<p>\u00a9 Copyright 2022--2023 Hewlett Packard Enterprise Development LP</p>\n"}, {"fullname": "bounce.bounce", "modulename": "bounce", "qualname": "bounce", "kind": "function", "doc": "<p>Return the input data + the time it took to do so.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">data</span><span class=\"p\">:</span> <span class=\"nb\">str</span> <span class=\"o\">=</span> <span class=\"s1\">&#39;&#39;</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">str</span>:</span></span>", "funcdef": "def"}, {"fullname": "bounce.main", "modulename": "bounce", "qualname": "main", "kind": "function", "doc": "<p>Fission entry point.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"return-annotation\">) -> <span class=\"nb\">str</span>:</span></span>", "funcdef": "def"}, {"fullname": "cuda-inc", "modulename": "cuda-inc", "kind": "module", "doc": "<p>A simple GPU-stressor function.</p>\n\n<p>This function increments all the values in an array in parallel using CUDA. It's a GPU-parallel version of the sequential <a href=\"inc.html\">CPU version</a>.\nUse it to measure the performance of a simple GPU function.</p>\n\n<p>This application creates an array in RAM and incmrements all the values in it\nsequentially. It runs on the CPU and tests the performance of the memory \nbandwidth on a single thread.\nThe array size is drawn randomly from a gaussian distribution with a given \nmean and scale.\nReturns (prints) the time taken by the process.</p>\n\n<p>CUDA requires some prerequisites, especially under docker. See <a href=\"../setup/CUDA.md\">setup instructions</a> for help.\nThe code uses <code>numba</code> and therefore requires a custom-built <strong>CUDA</strong> environment that installs it.</p>\n\n<p>It takes two integer optional parameters in order.\nThe first parameter is the mean size of the array. If you want the array to be \na constant size, just pass it as an only parameter.\nIf the second parameter is given, it is used as the scale of the Gaussian \ndistribution (again, you can pass 0 for a constant size).\nMore details on the distribution can be found \n<a href=\"https://numpy.org/doc/stable/reference/random/generated/numpy.random.normal.html\">here</a>.</p>\n\n<p>The parameters are passed either by argv, stdin, or in the body of the HTTP request.</p>\n\n<p>\u00a9 Copyright 2022--2023 Hewlett Packard Enterprise Development LP</p>\n"}, {"fullname": "cuda-inc.device_inc", "modulename": "cuda-inc", "qualname": "device_inc", "kind": "function", "doc": "<p>Increment array on GPU.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">arr</span></span><span class=\"return-annotation\">) -> <span class=\"kc\">None</span>:</span></span>", "funcdef": "def"}, {"fullname": "cuda-inc.inc_cuda", "modulename": "cuda-inc", "qualname": "inc_cuda", "kind": "function", "doc": "<p>Wrapper for <code>device_inc()</code>.</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>mean (int, optional):</strong>  Mean size of input array.</li>\n<li><strong>scale (int, optional):</strong>  Scale argument for Gaussian array size.</li>\n</ul>\n\n<h6 id=\"returns\">Returns:</h6>\n\n<blockquote>\n  <p>str: The duration of execution.</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">mean</span><span class=\"p\">:</span> <span class=\"nb\">int</span> <span class=\"o\">=</span> <span class=\"mi\">0</span>, </span><span class=\"param\"><span class=\"n\">scale</span><span class=\"p\">:</span> <span class=\"nb\">int</span> <span class=\"o\">=</span> <span class=\"mi\">0</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">str</span>:</span></span>", "funcdef": "def"}, {"fullname": "cuda-inc.main", "modulename": "cuda-inc", "qualname": "main", "kind": "function", "doc": "<p>Fission entry point.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "cuda-matmul", "modulename": "cuda-matmul", "kind": "module", "doc": "<p>Square a random matrix of a given size on the GPU.</p>\n\n<p>This application creates a random matrix of size <code>N</code>x<code>N</code> and squares it.\nIt's the CUDA version of <code>matmul</code>.\nThe fast matrix-multiply code is adapted from <a href=\"https://numba.readthedocs.io/en/stable/cuda/examples.html#id30\">here</a>.</p>\n\n<p>The parameter <code>N</code> is passed either by argv[1] or in the body of the HTTP request.\nThe run time grows approximately as O(N<sup>3</sup>) and can therefore get too \nlong for a function for <code>N</code>&gt;10,000 or so.\nReturns (prints) the time taken by the squaring.</p>\n\n<p>The code uses <code>numba</code> and therefore requires a custom-built environment that \ninstalls it.  The code requires CUDA support and a custom environment and builder.\nSee more setup instructions <a href=\"../setup/CUDA.md\">here</a>.</p>\n\n<p>\u00a9 Copyright 2022--2023 Hewlett Packard Enterprise Development LP</p>\n"}, {"fullname": "cuda-matmul.TPB", "modulename": "cuda-matmul", "qualname": "TPB", "kind": "variable", "doc": "<p>Controls threads per block and shared memory usage.\nThe computation will be done on blocks of TPBxTPB elements.\nTPB should not be larger than 32 in this example</p>\n", "default_value": "16"}, {"fullname": "cuda-matmul.device_matmul", "modulename": "cuda-matmul", "qualname": "device_matmul", "kind": "function", "doc": "<p>Perform matrix multiplication of C = A * B using CUDA shared memory.</p>\n\n<p>Reference: <a href=\"https://stackoverflow.com/a/64198479/13697228\">https://stackoverflow.com/a/64198479/13697228</a> by @RobertCrovella</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">A</span>, </span><span class=\"param\"><span class=\"n\">B</span>, </span><span class=\"param\"><span class=\"n\">C</span></span><span class=\"return-annotation\">) -> <span class=\"kc\">None</span>:</span></span>", "funcdef": "def"}, {"fullname": "cuda-matmul.square_gpu", "modulename": "cuda-matmul", "qualname": "square_gpu", "kind": "function", "doc": "<p>Wrapper for <code>device_matmul()</code>.</p>\n\n<p>Create a random square matrix and multiply it by itself on GPU.\nfor reproducibility, we set a fixed seed for the rng.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">n</span><span class=\"p\">:</span> <span class=\"nb\">str</span> <span class=\"o\">=</span> <span class=\"s1\">&#39;&#39;</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">str</span>:</span></span>", "funcdef": "def"}, {"fullname": "cuda-matmul.main", "modulename": "cuda-matmul", "qualname": "main", "kind": "function", "doc": "<p>Fission entry point.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "distributions", "modulename": "distributions", "kind": "module", "doc": "<p>Produce synthetically generated outputs based on a chosen distribution.</p>\n\n<p>This function produces samples from several parametrized distributions,\nproviding a synthetic benchmark to test SHARP stopping criteria.</p>\n\n<p>The code uses <code>scipy</code> and <code>numpy</code> to compute statistics, statistical tests, and\nto fit statistical models to generate samples from the following distributions:</p>\n\n<pre><code>* Normal distribution\n* Log-Normal distribution\n* Multimodal distribution\n* Bimodal distribution\n* Cauchy distribution\n* Uniform distribution\n* Log-Uniform distribution\n* Logistic distribution\n* Sine distribution\n* Constant distribution (with noise)\n</code></pre>\n\n<p>The Bash code below shows how you can obtain multiple samples from different\ndistributions. The output will be 1000 samples of each of the 4 distributions\nnamed in the for loop range. We will run it locally and properly tag experiments\nwith the distribution name.</p>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"k\">for</span><span class=\"w\"> </span>i<span class=\"w\"> </span><span class=\"k\">in</span><span class=\"w\"> </span>normal<span class=\"w\"> </span>multimodal<span class=\"w\"> </span>uniform<span class=\"w\"> </span>constant\n<span class=\"k\">do</span>\n<span class=\"w\">    </span><span class=\"nb\">echo</span><span class=\"w\"> </span><span class=\"s2\">&quot;</span><span class=\"nv\">$i</span><span class=\"s2\">&quot;</span>\n<span class=\"w\">    </span>launchers/launch.py<span class=\"w\"> </span>-v<span class=\"w\"> </span>-e<span class=\"w\"> </span><span class=\"nv\">$i</span><span class=\"w\"> </span>-b<span class=\"w\"> </span><span class=\"nb\">local</span><span class=\"w\"> </span>-r<span class=\"w\"> </span><span class=\"m\">1</span><span class=\"w\"> </span>-t<span class=\"w\"> </span><span class=\"nv\">$i</span><span class=\"w\"> </span>distributions<span class=\"w\"> </span><span class=\"s2\">&quot;{\\&quot;method\\&quot;:\\&quot;</span><span class=\"nv\">$i</span><span class=\"s2\">\\&quot;,\\&quot;repetitions\\&quot;:1000}&quot;</span>\n<span class=\"k\">done</span>\n</code></pre>\n</div>\n\n<p>\u00a9 Copyright 2022--2023 Hewlett Packard Enterprise Development LP</p>\n"}, {"fullname": "distributions.multimodal", "modulename": "distributions", "qualname": "multimodal", "kind": "function", "doc": "<p>Produce samples from a multimodal distribution.</p>\n\n<p>Arguments from JSON configuration file:</p>\n\n<p>modes:        Number of modes to sample from (default: random int in [2, 6])\nparameters:   List of dictionaries with mean and standard deviation for each mode (default: random float in [20, 60] (mean) and [0.5, 2] (std_dev))\nrepetitions:  Number of samples. Use \"None\" instead of 1 for consistency in output type (default: None)</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">options</span><span class=\"p\">:</span> <span class=\"n\">Dict</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">,</span> <span class=\"n\">Any</span><span class=\"p\">]</span></span><span class=\"return-annotation\">) -> <span class=\"n\">Union</span><span class=\"p\">[</span><span class=\"nb\">float</span><span class=\"p\">,</span> <span class=\"n\">List</span><span class=\"p\">[</span><span class=\"nb\">float</span><span class=\"p\">]]</span>:</span></span>", "funcdef": "def"}, {"fullname": "distributions.sample", "modulename": "distributions", "qualname": "sample", "kind": "function", "doc": "<p>Produce samples from a number of distributions.</p>\n\n<p>Distribution choice is controlled by the \"method\" parameter (default: \"normal\"),\nwhich can have the following values:</p>\n\n<p>\"normal\":      Normal distribution<br>\n\"lognormal\":   Log-Normal distribution<br>\n\"multimodal\":  Multimodal distribution<br>\n\"bimodal\":     Bimodal distribution<br>\n\"cauchy\":      Cauchy distribution<br>\n\"uniform\":     Uniform distribution<br>\n\"loguniform\":  Log-Uniform distribution<br>\n\"logistic\":    Logistic distribution<br>\n\"sine\":        Sine distribution<br>\n\"constant\":    Constant distribution (with noise)<br></p>\n\n<p>Other arguments from JSON configuration file:</p>\n\n<p>repetitions:  Number of samples. Use \"None\" instead of 1 for consistency in output type (default: None)</p>\n\n<p>Distribution-specific parameters: Check each function's documentation</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">options</span><span class=\"p\">:</span> <span class=\"n\">Union</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">,</span> <span class=\"n\">Dict</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">,</span> <span class=\"n\">Any</span><span class=\"p\">]]</span> <span class=\"o\">=</span> <span class=\"p\">{}</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">str</span>:</span></span>", "funcdef": "def"}, {"fullname": "distributions.available_methods", "modulename": "distributions", "qualname": "available_methods", "kind": "variable", "doc": "<p></p>\n", "annotation": ": Dict[str, Any]", "default_value": "{&#x27;normal&#x27;: &lt;function _normal&gt;, &#x27;lognormal&#x27;: &lt;function _lognormal&gt;, &#x27;multimodal&#x27;: &lt;function _multimodal&gt;, &#x27;bimodal&#x27;: &lt;function _bimodal&gt;, &#x27;cauchy&#x27;: &lt;function _cauchy&gt;, &#x27;uniform&#x27;: &lt;function _uniform&gt;, &#x27;loguniform&#x27;: &lt;function _loguniform&gt;, &#x27;logistic&#x27;: &lt;function _logistic&gt;, &#x27;sine&#x27;: &lt;function _sine&gt;, &#x27;constant&#x27;: &lt;function _constant&gt;}"}, {"fullname": "distributions.main", "modulename": "distributions", "qualname": "main", "kind": "function", "doc": "<p>Fission entry point.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "inc", "modulename": "inc", "kind": "module", "doc": "<p>A simple CPU-stressor function.</p>\n\n<p>This application creates an array in RAM and incmrements all the values in it\nsequentially. It runs on the CPU and tests the performance of the memory \nbandwidth on a single thread.\nThe array size is drawn randomly from a gaussian distribution with a given \nmean and scale.\nReturns (prints) the time taken by the process.</p>\n\n<p>The code uses <code>numpy</code> and therefore requires a custom-built environment that installs it.</p>\n\n<p>It takes two integer optional parameters in order.\nThe first parameter is the mean size of the array. If you want the array to be \na constant size, just pass it as an only parameter.\nIf the second parameter is given, it is used as the scale of the Gaussian \ndistribution (again, you can pass 0 for a constant size).\nMore details on the distribution can be found \n<a href=\"https://numpy.org/doc/stable/reference/random/generated/numpy.random.normal.html\">here</a>.</p>\n\n<p>The parameters are passed either by argv, stdin, or in the body of the HTTP request.</p>\n\n<p>\u00a9 Copyright 2022--2023 Hewlett Packard Enterprise Development LP</p>\n"}, {"fullname": "inc.inc_cpu", "modulename": "inc", "qualname": "inc_cpu", "kind": "function", "doc": "<p>Increment an array in RAM.</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>mean (int, optional):</strong>  Mean size of input array.</li>\n<li><strong>scale (int, optional):</strong>  Scale argument for Gaussian array size.</li>\n</ul>\n\n<h6 id=\"returns\">Returns:</h6>\n\n<blockquote>\n  <p>str: The duration of execution.</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">mean</span><span class=\"p\">:</span> <span class=\"nb\">int</span> <span class=\"o\">=</span> <span class=\"mi\">0</span>, </span><span class=\"param\"><span class=\"n\">scale</span><span class=\"p\">:</span> <span class=\"nb\">int</span> <span class=\"o\">=</span> <span class=\"mi\">0</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">str</span>:</span></span>", "funcdef": "def"}, {"fullname": "inc.main", "modulename": "inc", "qualname": "main", "kind": "function", "doc": "<p>Fission entry point.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"return-annotation\">) -> <span class=\"nb\">str</span>:</span></span>", "funcdef": "def"}, {"fullname": "matmul", "modulename": "matmul", "kind": "module", "doc": "<p>Square a random matrix of a given size on the CPU.</p>\n\n<p>This application creates a random matrix of size <code>N</code>x<code>N</code> and squares it.\nReturns (prints) the time taken by the squaring.</p>\n\n<p>The code uses <code>numpy</code> and therefore requires a custom-built environment that \ninstalls it.</p>\n\n<p>The code can use up all available cores if the version of <code>numpy</code> supports it. The default python builder for Fission (using Alpine) does not support it. \nBut if you create a custom builder/environment as described \n<a href=\"../../docs/setup/fission.md\">here</a>, you can use multithreaded <code>numpy</code>.</p>\n\n<p>The parameter <code>N</code> is passed either by argv[1] or in the body of the HTTP \nrequest.  The run time is somwhere between O(N<sup>2</sup>) and O(N<sup>3</sup>).\nOn a 24-core E5-2680 v3, this yields about 50s for <code>N</code>=20000.</p>\n\n<p>\u00a9 Copyright 2022--2023 Hewlett Packard Enterprise Development LP</p>\n"}, {"fullname": "matmul.square_cpu", "modulename": "matmul", "qualname": "square_cpu", "kind": "function", "doc": "<p>Square a random matrix of size n x n.</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>n (str, optional):</strong>  size of matrix to square (one dimension).</li>\n</ul>\n\n<h6 id=\"returns\">Returns:</h6>\n\n<blockquote>\n  <p>str: The duration of execution.</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">n</span><span class=\"p\">:</span> <span class=\"nb\">str</span> <span class=\"o\">=</span> <span class=\"s1\">&#39;&#39;</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">str</span>:</span></span>", "funcdef": "def"}, {"fullname": "matmul.main", "modulename": "matmul", "qualname": "main", "kind": "function", "doc": "<p>Fission entry point.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"return-annotation\">) -> <span class=\"nb\">str</span>:</span></span>", "funcdef": "def"}, {"fullname": "mpi-pingpong-single", "modulename": "mpi-pingpong-single", "kind": "module", "doc": "<p>Simple MPI peer-to-peer function that sends a number of messages up and down a ring.</p>\n\n<p>This function runs an MPI application in a single function instance.\nThe MPI application is a Python program using the <code>mpi4py</code> library.\nIt performs a synchronization in a ring using <code>N</code> ranks, all in the same \nfunction/container. <code>N</code> is a parameter passed to the function.</p>\n\n<p>The function uses a binary environment with Python3 and OpenMPI installed.\nIt then executes <code>mpirun</code> in a script.</p>\n\n<p>\u00a9 Copyright 2022--2023 Hewlett Packard Enterprise Development LP</p>\n"}, {"fullname": "mpi-pingpong-single.pingpong", "modulename": "mpi-pingpong-single", "qualname": "pingpong", "kind": "function", "doc": "<p>Iteratively exchange messages up and down the ring of MPI processes.</p>\n\n<p>Sets up the MPI COMM WORLD and starts exchanging messages in a loop.</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>n (str, optional):</strong>  The number of synchronization steps (loops) to run.</li>\n</ul>\n\n<h6 id=\"returns\">Returns:</h6>\n\n<blockquote>\n  <p>str: The duration of execution.</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">n</span><span class=\"p\">:</span> <span class=\"nb\">str</span> <span class=\"o\">=</span> <span class=\"s1\">&#39;&#39;</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">str</span>:</span></span>", "funcdef": "def"}, {"fullname": "mpi-pingpong-single.main", "modulename": "mpi-pingpong-single", "qualname": "main", "kind": "function", "doc": "<p>Fission entry point.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"return-annotation\">) -> <span class=\"nb\">str</span>:</span></span>", "funcdef": "def"}, {"fullname": "pingpong", "modulename": "pingpong", "kind": "module", "doc": "<p>Simple MPI peer-to-peer function that sends a number of messages up and down a ring.</p>\n\n<p>This function runs an MPI application in a single function instance.\nThe MPI application is a Python program using the <code>mpi4py</code> library.\nIt performs a synchronization in a ring using <code>N</code> ranks, all in the same \nfunction/container. <code>N</code> is a parameter passed to the function.</p>\n\n<p>The function uses a binary environment with Python3 and OpenMPI installed.\nIt then executes <code>mpirun</code> in a script.</p>\n\n<p>\u00a9 Copyright 2022--2023 Hewlett Packard Enterprise Development LP</p>\n"}, {"fullname": "pingpong.pingpong", "modulename": "pingpong", "qualname": "pingpong", "kind": "function", "doc": "<p>Iteratively exchange messages up and down the ring of MPI processes.</p>\n\n<p>Sets up the MPI COMM WORLD and starts exchanging messages in a loop.</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>n (str, optional):</strong>  The number of synchronization steps (loops) to run.</li>\n</ul>\n\n<h6 id=\"returns\">Returns:</h6>\n\n<blockquote>\n  <p>str: The duration of execution.</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">n</span><span class=\"p\">:</span> <span class=\"nb\">str</span> <span class=\"o\">=</span> <span class=\"s1\">&#39;&#39;</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">str</span>:</span></span>", "funcdef": "def"}, {"fullname": "pingpong.main", "modulename": "pingpong", "qualname": "main", "kind": "function", "doc": "<p>Fission entry point.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"return-annotation\">) -> <span class=\"nb\">str</span>:</span></span>", "funcdef": "def"}, {"fullname": "nope", "modulename": "nope", "kind": "module", "doc": "<p>A no-op function.</p>\n\n<p>nope does nothing, which can be useful for measuring invocation overhead.\nIt takes no arguments, and returns a string representing zero run time.</p>\n\n<p>\u00a9 Copyright 2022--2023 Hewlett Packard Enterprise Development LP</p>\n"}, {"fullname": "nope.do_nothing", "modulename": "nope", "qualname": "do_nothing", "kind": "function", "doc": "<p>Return a constant string with zero run time.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"return-annotation\">) -> <span class=\"nb\">str</span>:</span></span>", "funcdef": "def"}, {"fullname": "nope.main", "modulename": "nope", "qualname": "main", "kind": "function", "doc": "<p>Fission entry point.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"return-annotation\">) -> <span class=\"nb\">str</span>:</span></span>", "funcdef": "def"}, {"fullname": "rodinia-cuda", "modulename": "rodinia-cuda", "kind": "module", "doc": "<p>Run benchmarks from the Rodinia suite for HPC on a GPU using CUDA.</p>\n\n<p>This application can be used to run the benchmarks in Rodinia on the GPU using CUDA.\nIt takes the benchmark name and its corresponding parameters as inputs.\nMore details about the benchmarks can be found <a href=\"https://www.cs.virginia.edu/~skadron/Papers/rodinia_iiswc09.pdf\">here</a>.</p>\n\n<p>Below is the list of all the available benchmarks with their default parameters (space separated):</p>\n\n<pre><code>* backprop: 65536\n* bfs: /app/rodinia/data/bfs/graph65536.txt\n* gaussian: -f /app/rodinia/data/gaussian/matrix4.txt\n* heartwall: /app/rodinia/data/heartwall/test.avi 20\n* hotspot: 1024 2 4 /app/rodinia/data/hotspot/temp_1024 /app/rodinia/data/hotspot/power_1024 output.out\n* lavaMD: -boxes1d 10\n* lud: -s 256 -v\n* needle: 2048 10\n* nn: /app/rodinia/data/nn/filelist_4 -r 5 -lat 30 -lng 90\n* particle_filter_naive: -x 128 -y 128 -z 10 -np 10000\n* particle_filter_float: -x 128 -y 128 -z 10 -np 10000\n* pathfinder: 100000 100 20\n* sc: 10 20 256 65536 65536 1000 none output.txt 1\n* srad_v1: 100 0.5 502 458\n* srad_v2: 2048 2048 0 127 0 127 0.5 2\n</code></pre>\n\n<h2 id=\"note-for-executing-the-binaries-locally-you-need-to-compile-the\">Note: For executing the binaries locally, you need to compile the</h2>\n\n<p><a href=\"https://github.com/yuhc/gpu-rodinia\">Rodinia benchmarks</a> on your system in \nthe folder <code>/usr/local/rodinia/</code>. It assumes that the binaries are combiled \nusing the Makefile and are present in <code>/usr/local/rodinia/bin/linux/omp/</code>.</p>\n\n<h6 id=\"the-launcher-can-be-used-for-local-execution-as-shown-below\">The launcher can be used for local execution as shown below:</h6>\n\n<blockquote>\n  <p><code>./launchers/launch.py -b local rodinia-cuda 'backprop 65536'</code></p>\n</blockquote>\n\n<p>These inputs can be passed either by argv, stdin, or in the body of the HTTP request.</p>\n\n<p>\u00a9 Copyright 2022--2023 Hewlett Packard Enterprise Development LP</p>\n"}, {"fullname": "rodinia-cuda.rodinia_path", "modulename": "rodinia-cuda", "qualname": "rodinia_path", "kind": "variable", "doc": "<p>Top-level path for Rodinia applications.</p>\n", "annotation": ": str", "default_value": "&#x27;/app/rodinia_3.1/&#x27;"}, {"fullname": "rodinia-cuda.commands", "modulename": "rodinia-cuda", "qualname": "commands", "kind": "variable", "doc": "<p>Commands dictionary with function names as keys and their respective arguments as values.</p>\n", "annotation": ": Dict[str, List[str]]", "default_value": "{}"}, {"fullname": "rodinia-cuda.exec_func", "modulename": "rodinia-cuda", "qualname": "exec_func", "kind": "function", "doc": "<p>Run the selected Rodinia benchmark with the given arguments.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">args</span><span class=\"p\">:</span> <span class=\"nb\">str</span> <span class=\"o\">=</span> <span class=\"s1\">&#39;&#39;</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">str</span>:</span></span>", "funcdef": "def"}, {"fullname": "rodinia-cuda.main", "modulename": "rodinia-cuda", "qualname": "main", "kind": "function", "doc": "<p>Fission entry point.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "rodinia-omp", "modulename": "rodinia-omp", "kind": "module", "doc": "<p>Run benchmarks from the Rodinia suite for HPC on OpenMP.</p>\n\n<p>This application can be used to run the benchmarks in Rodinia on the CPU using OpenMP.\nIt takes the benchmark name and its corresponding parameters as inputs.\nMore details about the benchmarks can be found <a href=\"https://www.cs.virginia.edu/~skadron/Papers/rodinia_iiswc09.pdf\">here</a>.</p>\n\n<p>Below is the list of all the available benchmarks with their default parameters (space separated):</p>\n\n<pre><code>* backprop: 65536\n* bfs: 4 /app/rodinia/data/bfs/graph1MW_6.txt\n* heartwall: /app/rodinia/data/heartwall/test.avi 20 4\n* hotspot: 1024 1024 2 4 /app/rodinia/data/hotspot/temp_1024 /app/rodinia/data/hotspot/power_1024 output.out\n* kmeans: -n 4 -i /app/rodinia/data/kmeans/kdd_cup\n* lavaMD: -cores 4 -boxes1d 10\n* leukocyte: 5 4 /app/rodinia/data/leukocyte/testfile.avi\n* lud: -s 8000\n* needle: 2048 10 2\n* nn: /app/rodinia/data/nn/filelist.txt 5 30 90\n* particle_filter: -x 128 -y 128 -z 10 -np 10000\n* pathfinder: 100000 100 &gt; pathfinder_out\n* sc: 10 20 256 65536 65536 1000 none output.txt 4\n* srad_v1: 100 0.5 502 458 4\n* srad_v2: 2048 2048 0 127 0 127 2 0.5 2\n</code></pre>\n\n<h2 id=\"warning-the-following-functions-do-not-work-as-intented-and-need-to-be-updated\">Warning: The following functions do not work as intented and need to be updated:</h2>\n\n<pre><code>1. nn: The binary returns error while trying to read an input file.\n</code></pre>\n\n<h2 id=\"note-for-executing-the-binaries-locally-you-need-to-compile-the\">Note: For executing the binaries locally, you need to compile the</h2>\n\n<p><a href=\"https://github.com/yuhc/gpu-rodinia\">Rodinia benchmarks</a> on your system in the\nfolder <code>/usr/local/rodinia/</code>. It assumes that the binaries are combiled using \nthe Makefile and are present in <code>/usr/local/rodinia/bin/linux/omp/</code>.</p>\n\n<h6 id=\"the-launcher-can-be-used-for-local-execution-as-shown-below\">The launcher can be used for local execution as shown below:</h6>\n\n<blockquote>\n  <p><code>./launchers/launch.py -b local rodinia-omp 'backprop 65536'</code></p>\n</blockquote>\n\n<p>The input parameters can be passed either by argv, stdin, or in the body of \nthe HTTP request.</p>\n\n<p>\u00a9 Copyright 2022--2023 Hewlett Packard Enterprise Development LP</p>\n"}, {"fullname": "rodinia-omp.rodinia_path", "modulename": "rodinia-omp", "qualname": "rodinia_path", "kind": "variable", "doc": "<p>Top-level path for Rodinia applications.</p>\n", "annotation": ": str", "default_value": "&#x27;/app/rodinia_3.1/&#x27;"}, {"fullname": "rodinia-omp.commands", "modulename": "rodinia-omp", "qualname": "commands", "kind": "variable", "doc": "<p>Commands dictionary with function names as keys and their respective arguments as values.</p>\n", "annotation": ": Dict[str, List[str]]", "default_value": "{}"}, {"fullname": "rodinia-omp.exec_func", "modulename": "rodinia-omp", "qualname": "exec_func", "kind": "function", "doc": "<p>Run the selected Rodinia benchmark with the given arguments.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">args</span><span class=\"p\">:</span> <span class=\"nb\">str</span> <span class=\"o\">=</span> <span class=\"s1\">&#39;&#39;</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">str</span>:</span></span>", "funcdef": "def"}, {"fullname": "rodinia-omp.main", "modulename": "rodinia-omp", "qualname": "main", "kind": "function", "doc": "<p>Fission entry point.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "sleep", "modulename": "sleep", "kind": "module", "doc": "<p>A function to idly wait.</p>\n\n<p>This function suspends execution for a given amount of seconds (given as\ncommand-line argument, in stdin, or in the request body).\nIt is useful for creating a cool-down period between other functions, possibly \nflushing the framework's caches.</p>\n\n<p>Caution: most frameworks time out for long functions (the default for Fission \nis 60s).\nIf you plan to sleep for longer periods, you must adjust the timeout period.</p>\n\n<p>\u00a9 Copyright 2022--2023 Hewlett Packard Enterprise Development LP</p>\n"}, {"fullname": "sleep.sleep_sec", "modulename": "sleep", "qualname": "sleep_sec", "kind": "function", "doc": "<p>Sleep for <code>seconds</code> seconds and return how long it took.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">seconds</span><span class=\"p\">:</span> <span class=\"nb\">str</span> <span class=\"o\">=</span> <span class=\"s1\">&#39;&#39;</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">str</span>:</span></span>", "funcdef": "def"}, {"fullname": "sleep.main", "modulename": "sleep", "qualname": "main", "kind": "function", "doc": "<p>Fission entry point.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "swapbytes", "modulename": "swapbytes", "kind": "module", "doc": "<p>A simple I/O-bound benchmark \"application\".</p>\n\n<p>This application reads in one or more input files with buffer cache disabled,\nand for each one creates an output file with a \".out\" appended to its filename.\nEach output is a copy of the input using reverse byte order.</p>\n\n<p>The program tries to disable the Linux buffer cache before reading to ensure actual disk I/O is performed and measured.\nThis application can serve as a simple I/O micro-benchmark.\nSeveral example input files of different sizes can be used in the format <code>zeros-*m</code>.\nThe code recreates these files (if not already present), without the need for \nany external package or initialization.</p>\n\n<p>\u00a9 Copyright 2022--2023 Hewlett Packard Enterprise Development LP</p>\n"}, {"fullname": "swapbytes.swap_bytes", "modulename": "swapbytes", "qualname": "swap_bytes", "kind": "function", "doc": "<p>Reverse the bytes in a list of files.</p>\n\n<p>For every file in the input list of filenames, try to locate the file in\nthe current directory. If the file isn't there, it will create it and fill\nit with zeros (the number of bytes is the suffix of the filename).</p>\n\n<p>Then, for every input file, it will open an output file with a \".out\" suffix\nand copy over all the input bytes in the file in reverse order.</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>fns (str):</strong>  a space-separated list of filenames.</li>\n</ul>\n\n<h6 id=\"returns\">Returns:</h6>\n\n<blockquote>\n  <p>str: a string with the time in seconds it took to reverse all files</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">fns</span><span class=\"p\">:</span> <span class=\"nb\">str</span> <span class=\"o\">=</span> <span class=\"s1\">&#39;&#39;</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">str</span>:</span></span>", "funcdef": "def"}, {"fullname": "swapbytes.main", "modulename": "swapbytes", "qualname": "main", "kind": "function", "doc": "<p>Fission entry point.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"return-annotation\">):</span></span>", "funcdef": "def"}];

    // mirrored in build-search-index.js (part 1)
    // Also split on html tags. this is a cheap heuristic, but good enough.
    elasticlunr.tokenizer.setSeperator(/[\s\-.;&_'"=,()]+|<[^>]*>/);

    let searchIndex;
    if (docs._isPrebuiltIndex) {
        console.info("using precompiled search index");
        searchIndex = elasticlunr.Index.load(docs);
    } else {
        console.time("building search index");
        // mirrored in build-search-index.js (part 2)
        searchIndex = elasticlunr(function () {
            this.pipeline.remove(elasticlunr.stemmer);
            this.pipeline.remove(elasticlunr.stopWordFilter);
            this.addField("qualname");
            this.addField("fullname");
            this.addField("annotation");
            this.addField("default_value");
            this.addField("signature");
            this.addField("bases");
            this.addField("doc");
            this.setRef("fullname");
        });
        for (let doc of docs) {
            searchIndex.addDoc(doc);
        }
        console.timeEnd("building search index");
    }

    return (term) => searchIndex.search(term, {
        fields: {
            qualname: {boost: 4},
            fullname: {boost: 2},
            annotation: {boost: 2},
            default_value: {boost: 2},
            signature: {boost: 2},
            bases: {boost: 2},
            doc: {boost: 1},
        },
        expand: true
    });
})();